:coffeescript
  $ ->
    $('body').imagesLoaded ->
      window.print()
      window.location = "/cleaning"

.container.container-full-height.image-container
  
  .screen-only
    .page-1.page.progress-page
      .page-content.align_center
        .full-page.surf-blue.top-half.verticalize-container.loading-container
          .verticalize
            .head
              %p Printing report
            .info
              %p
                %em Please wait
            .loading
              &nbsp;

  - user = @debug || current_user
  - unless user == nil
    - fb_user = FbGraph::User.fetch(user.uid, access_token: user.access_token)    
    
    -# raise "halt".inspect
    
    - album = fb_user.albums.detect { |album| album.type == 'profile' }
    - profile_pictures = album.photos
    - pic = profile_pictures.first.images.first.source
    
    :coffeescript
      img = new Image()
      img.src = "#{pic}"
  

    .print-only
      .cover.page-1.print-page.full-page
        .print-page-content.align_center
          - unless pic == nil
            %img.the-pictur{:src => "#{pic}"}

          .the-name
            = fb_user.name
            =# "|"
      
      / .spacer.print-page.full-page
      /   .print-page-content.align_center
      /     %p
      /       &nbsp;

      .print-page-2.print-page.full-page
        .print-page-content.align_center
          .underlined
            %p
              Welcome to your life
              = fb_user.name
          .dates
            .born
              %p
                born:
                = fb_user.birthday


      - looped_once = false
      - looped_times = 0
      - poasts = fb_user.posts
      - tags = []

      - while ((looped_once == false or poasts.next) and (looped_times < 3))
        - poasts.each do |post|
          - if post.message
            - message_tags = post.message.scan /(?:\s|^)(?:#(?!\d+(?:\s|$)))(\w+)(?=\s|$)/i
          - unless message_tags.blank?
            - message_tags.each do |tag|
              - tags << "##{tag[0]}"
        
        - poasts = poasts.next
        - looped_once = true
        - looped_times += 1
      
      - unless tags.empty?
        .print-page-3.print-page.complex-page.full-page
          .print-page-content.align_center
            .underlined
              %p
                Topics you are interested in

            - tags.each do |tag|
              .part
                %p
                  = tag

          

      - places = fb_user.locations.collect{|loc| loc.place.name}
      - unless places.empty? or places == nil
        .print-page-4.print-page.complex-page.full-page
          .print-page-content.align_center
            .underlined
              %p
                Places you have visited
            - places.uniq.each do |place|
              .part
                %p
                  = place

      .print-page-5.print-page.complex-page.full-page
        .print-page-content.align_center
          .underlined
            %p
              Things that you like

          - fb_user.likes.each do |like|
            .part
              %p
                = like.name


      .print-page-y.print-page.complex-page.full-page
        .print-page-content.align_center
          .underlined
            %p Things you are saying
          

          - fb_user.statuses.shuffle.take(15).each do |status|
            .part
              %p
                = '"' + "#{status.raw_attributes['message']}" + '"'
      

      - looped_once = false
      - looped_times = 0
      - events = fb_user.events 
      - all_events = []

      - while ((looped_once == false or events.next) and (looped_times < 1))
        - all_events << events
        - events = events.next
        - looped_once = true
        - looped_times += 1
      
      -# ev_1 = events.take(15)
      -# ev_2 = events.drop(15)
      -# all_events = [ev_1, ev_2]
      - all_events = [events.take(15)]
      - all_events.each do |local_events|
        .print-page-5.print-page.complex-page.full-page
          .print-page-content.align_center
            .underlined
              %p Events you have attended
            
            - local_events.each do |event|
              .part
                %p
                  = event.name
                  %br
                
                  %em
                    - if event.start_time.year < Time.now.year
                      - if event.location.blank?
                        = "#{event.start_time.strftime('%b %e %Y')}"
                      - else
                        = "#{event.location}, #{event.start_time.strftime('%b %e %Y')}"
                    - else
                      - if event.location.blank?             
                        = "#{event.start_time.strftime('%b %e')}"
                      - else
                        = "#{event.location}, #{event.start_time.strftime('%b %e')}"
                
      
      - groups = fb_user.groups
      - if groups.size > 0
        - if groups.size > 15
          -# all_groups = [groups.take(15), groups.drop(15).take(15)]
          - all_groups = [groups.take(15)]
          - all_groups.each do |local_groups|
            .print-page-x.print-page.complex-page.full-page
              .print-page-content.align_center
                .underlined
                  %p Groups you are a member of

                - local_groups.each_with_index do |group, k|
                  - unless k > 15
                    %p= group.name

      - # activities = fb_user.activities
      - # books = fb_user.books
      - # family = fb_user.family
      - # friends = fb_user.friends
      - # groups = fb_user.groups
      - # interests = fb_user.interests
      - # notes = fb_user.notes
      - inbox = fb_user.inbox
      - inbox.each_with_index do |inbox_feed, k|
        - unless k > 3
          .print-page-x.print-page.complex-page.full-page
            .print-page-content.align_center
              .underlined
                %p Private Messages
              
              - if inbox_feed.raw_attributes[:comments] != nil
                - if inbox_feed.raw_attributes[:comments][:data] != nil
                  - inbox_comments = inbox_feed.raw_attributes[:comments][:data]

                  - inbox_comments = inbox_comments.reject{|c| c[:message] == nil or c[:message].strip == '' }
                  - inbox_comments = inbox_comments.reject{|c| c[:message] != nil and c[:message].include? 'http'}
                  
                  - if inbox_comments.size > 10
                    - inbox_comments = inbox_comments.sort_by{|x| x.length}.reverse
                    -# limit = (inbox_comments.size / 2).ceil
                    - limit = 10
                    - inbox_comments = inbox_comments.take(limit)

                  - inbox_comments.shuffle.take(10).each do |inbox_comment|
                    - if inbox_comment[:from] != nil
                      %p
                        %em
                        
                          - if inbox_comment[:from].has_key?(:name)
                            = inbox_comment[:from][:name]
                          - else
                            - if inbox_comment[:from].has_key?(:id)
                              = inbox_comment[:form][:id]
                            - else
                              = inbox_comment[:from]
                    .part
                      %p
                        = inbox_comment[:message]


      .print-page-x.print-page.last-page.full-page
        .print-page-content.align_center
          %p
            E-dentity is your private album of content you have shared on Facebook. This booklet seeks to give users an insight to simplicity of gathering and analysing your most sensitive information. It asks a participant to login to its Facebook account, scrapes his history and automatically prints it in an understandable form that is handed to the user. In information society there is nothing more valuable than the information itself. This is given further impetus by the recent leaks where a number of mass-surveillance programs were undertaken by the NSA and GCHQ, demonstrating to us how our privacy has never as compromised as it is right now.
          .underlined
            %p
              Disclaimer:
          %p 
            All data is erased after printing and is not being saved on any servers. Authors promise the data are not going to be used in any other purpose other than project Edentity. They are at not responsible for any damage that gathered information may cause.
          %p
            Authors: Emil Kozole with Srđan Prodanović
            Organised by: Galerija Aksioma
          %p
            Kino Šiška, 2014
            
      -# raise fb_user.inspect
      
      / %p.col_12
      / = debug user
      / = debug fb_user
      / = img = FbGraph:: fb_user.picture
